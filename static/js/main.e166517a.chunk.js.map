{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","getUser","usersFromServer","find","App","visibleUsers","useState","setTitle","selectedUser","setSelectedUser","setTodos","setCompleted","tittleError","setTittleError","selectedError","setSelectedError","useEffect","todosFromServer","handleSubmit","event","preventDefault","prev","Math","max","item","action","method","onSubmit","length","type","placeholder","value","onChange","target","htmlFor","checked","state","Number","disabled","person","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e166517a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../../Types/User';\nimport './Userinfo.scss';\n\ntype Person = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Person> = ({ user }) => {\n  const {\n    email,\n    name,\n  } = user;\n\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${email}`}\n    >\n      {`${name}`}\n    </a>\n  );\n};\n","import React from 'react';\nimport './todoInfo.scss';\nimport cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../Types/Todo';\n\ntype Todos = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Todos> = ({ todo }) => {\n  const {\n    title,\n    user,\n    completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={cn(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {`${title}`}\n      </h2>\n\n      {user && (\n        <UserInfo\n          user={user}\n        />\n      )}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../Types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype List = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<List> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map((todo) => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","// import React, { useState } from 'react';\nimport './App.scss';\nimport { useEffect, useState } from 'react';\nimport { Todo } from './Types/Todo';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './Types/User';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const App: React.FC = () => {\n  const visibleUsers = [...usersFromServer];\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [completed, setCompleted] = useState(false);\n  const [tittleError, setTittleError] = useState(false);\n  const [selectedError, setSelectedError] = useState(false);\n\n  useEffect(() => {\n    setTodos(todosFromServer.map(todo => ({\n      ...todo,\n      user: getUser(todo.userId),\n    })));\n  }, []);\n\n  const reset = () => {\n    setTitle('');\n    setCompleted(false);\n    setSelectedUser(0);\n    setSelectedError(false);\n    setTittleError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setTodos((prev) => {\n      const todo = {\n        title,\n        userId: (selectedUser),\n        completed,\n        user: getUser(selectedUser),\n        id: Math.max(...prev.map(item => item.id)) + 1,\n      };\n\n      return (\n        [\n          ...prev,\n          todo,\n        ]\n      );\n    });\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          if (!selectedUser && title.length === 0) {\n            setSelectedError(true);\n            setTittleError(true);\n          } else if (!selectedUser) {\n            setSelectedError(true);\n          } else if (title.length === 0) {\n            setTittleError(true);\n          } else {\n            handleSubmit(event);\n          }\n        }}\n      >\n        <div className=\"field\">\n          <span className=\"field__text\">Title:</span>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setTittleError(false);\n            }}\n          />\n          { tittleError\n            && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label\n            className=\"field__text\"\n            htmlFor=\"completed\"\n          >\n            Completed:\n          </label>\n          <input\n            type=\"checkbox\"\n            data-cy=\"completed\"\n            id=\"completed\"\n            checked={completed}\n            onChange={() => {\n              setCompleted((state) => !state);\n            }}\n          />\n        </div>\n\n        <div className=\"field\">\n          <span className=\"field__text\">User:</span>\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={(event) => {\n              setSelectedUser(Number(event.target.value));\n              setSelectedError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {visibleUsers.map((person) => (\n              <option value={person.id}>\n                {person.name}\n              </option>\n            ))}\n          </select>\n          { selectedError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}